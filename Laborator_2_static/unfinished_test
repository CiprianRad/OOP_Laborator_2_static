#include "tests.h"
#include <iostream>
#include <cassert>
#include "service.h"
using namespace std;

bool arraysAreEqual(int a[], int b[], int size) {
    for (int i = 0; i < size; i++) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}

void test_functionality_1() {
    // Test 1: Already sorted array
    int test1[] = {1, 2, 3, 4, 5};
    int expected1[] = {1, 2, 3, 4, 5};
    int n1 = sizeof(test1) / sizeof(test1[0]);
    functionality_1(n1, test1);
    assert(arraysAreEqual(test1, expected1, n1));

    // Test 2: Reverse sorted array
    int test2[] = {5, 4, 3, 2, 1};
    int expected2[] = {1, 2, 3, 4, 5};
    int n2 = sizeof(test2) / sizeof(test2[0]);
    functionality_1(n2, test2);
    assert(arraysAreEqual(test2, expected2, n2));

    // Test 3: Random order
    int test3[] = {4, 1, 3, 5, 2};
    int expected3[] = {1, 2, 3, 4, 5};
    int n3 = sizeof(test3) / sizeof(test3[0]);
    functionality_1(n3, test3);
    assert(arraysAreEqual(test3, expected3, n3));

    // Test 4: Array with duplicate values
    int test4[] = {3, 1, 2, 3, 2, 1};
    int expected4[] = {1, 1, 2, 2, 3, 3};
    int n4 = sizeof(test4) / sizeof(test4[0]);
    functionality_1(n4, test4);
    assert(arraysAreEqual(test4, expected4, n4));

    // Test 5: Single-element array
    int test5[] = {7};
    int expected5[] = {7};
    int n5 = sizeof(test5) / sizeof(test5[0]);
    functionality_1(n5, test5);
    assert(arraysAreEqual(test5, expected5, n5));

    // Test 6: Empty array
    int test6[] = {};
    int expected6[] = {};
    int n6 = sizeof(test6) / sizeof(test6[0]);
    functionality_1(n6, test6);
    assert(arraysAreEqual(test6, expected6, n6));
}
